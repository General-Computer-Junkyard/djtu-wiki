/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
import { serialization, unstack, stack, tensor, tidy, range, image } from '@tensorflow/tfjs-core';
import { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';
import { Layer } from '../../engine/topology';
import * as K from '../../backend/tfjs_backend';
const { resizeBilinear, cropAndResize } = image;
class CenterCrop extends Layer {
    constructor(args) {
        super(args);
        this.height = args.height;
        this.width = args.width;
    }
    centerCrop(inputs, hBuffer, wBuffer, height, width, inputHeight, inputWidth, dtype) {
        return tidy(() => {
            let input;
            let isRank3 = false;
            const top = hBuffer / inputHeight;
            const left = wBuffer / inputWidth;
            const bottom = ((height) + hBuffer) / inputHeight;
            const right = ((width) + wBuffer) / inputWidth;
            const bound = [top, left, bottom, right];
            const boxesArr = [];
            if (inputs.rank === 3) {
                isRank3 = true;
                input = stack([inputs]);
            }
            else {
                input = inputs;
            }
            for (let i = 0; i < input.shape[0]; i++) {
                boxesArr.push(bound);
            }
            const boxes = tensor(boxesArr, [boxesArr.length, 4]);
            const boxInd = range(0, boxesArr.length, 1, 'int32');
            const cropSize = [height, width];
            const cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');
            if (isRank3) {
                return K.cast(getExactlyOneTensor(unstack(cropped)), dtype);
            }
            return K.cast(cropped, dtype);
        });
    }
    upsize(inputs, height, width, dtype) {
        return tidy(() => {
            const outputs = resizeBilinear(inputs, [height, width]);
            return K.cast(outputs, dtype);
        });
    }
    call(inputs, kwargs) {
        return tidy(() => {
            const rankedInputs = getExactlyOneTensor(inputs);
            const dtype = rankedInputs.dtype;
            const inputShape = rankedInputs.shape;
            const inputHeight = inputShape[inputShape.length - 3];
            const inputWidth = inputShape[inputShape.length - 2];
            let hBuffer = 0;
            if (inputHeight !== this.height) {
                hBuffer = Math.floor((inputHeight - this.height) / 2);
            }
            let wBuffer = 0;
            if (inputWidth !== this.width) {
                wBuffer = Math.floor((inputWidth - this.width) / 2);
                if (wBuffer === 0) {
                    wBuffer = 1;
                }
            }
            if (hBuffer >= 0 && wBuffer >= 0) {
                return this.centerCrop(rankedInputs, hBuffer, wBuffer, this.height, this.width, inputHeight, inputWidth, dtype);
            }
            else {
                return this.upsize(inputs, this.height, this.width, dtype);
            }
        });
    }
    getConfig() {
        const config = {
            'height': this.height,
            'width': this.width
        };
        const baseConfig = super.getConfig();
        Object.assign(config, baseConfig);
        return config;
    }
    computeOutputShape(inputShape) {
        inputShape = getExactlyOneShape(inputShape);
        const hAxis = inputShape.length - 3;
        const wAxis = inputShape.length - 2;
        inputShape[hAxis] = this.height;
        inputShape[wAxis] = this.width;
        return inputShape;
    }
}
/** @nocollapse */
CenterCrop.className = 'CenterCrop';
export { CenterCrop };
serialization.registerClass(CenterCrop);
//# sourceMappingURL=data:application/json;base64,