{"version":3,"file":"tf-backend-webgl.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../tfjs-backend-webgl/src/canvas_util.ts","../../../../tfjs-backend-webgl/src/tex_util.ts","../../../../tfjs-backend-webgl/src/webgl_util.ts","../../../../tfjs-backend-webgl/src/flags_webgl.ts","../../../../tfjs-backend-webgl/src/glsl_version.ts","../../../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../../../tfjs-backend-webgl/src/shader_compiler.ts","../../../../tfjs-backend-webgl/src/gpgpu_math.ts","../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/gpgpu_util.ts","../../../../tfjs-backend-webgl/src/gpgpu_context.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/kernels/BitwiseAnd.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgl/src/packing_util.ts","../../../../tfjs-backend-webgl/src/pack_gpu.ts","../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../../../tfjs-backend-webgl/src/texture_manager.ts","../../../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/unpack_gpu.ts","../../../../tfjs-backend-webgl/src/backend_webgl.ts","../../../../tfjs-backend-webgl/src/webgl.ts","../../../../tfjs-backend-webgl/src/base.ts","../../../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Identity.ts","../../../../tfjs-backend-webgl/src/kernels/Complex.ts","../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../../../tfjs-backend-webgl/src/mean_gpu.ts","../../../../tfjs-backend-webgl/src/reduce_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgl/src/transpose_gpu.ts","../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum.ts","../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgl/src/kernels/Abs.ts","../../../../tfjs-backend-webgl/src/kernels/Acos.ts","../../../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../../../tfjs-backend-webgl/src/kernels/Add.ts","../../../../tfjs-backend-webgl/src/addn_gpu.ts","../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AddN.ts","../../../../tfjs-backend-webgl/src/kernels/All.ts","../../../../tfjs-backend-webgl/src/kernels/Any.ts","../../../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgl/src/kernels/Asin.ts","../../../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../../../tfjs-backend-webgl/src/kernels/Atan.ts","../../../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../../../tfjs-backend-webgl/src/pool_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../../../tfjs-backend-webgl/src/slice_gpu.ts","../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Slice.ts","../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../../../tfjs-backend-webgl/src/kernels/BitwiseAnd.ts","../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgl/src/kernels/Real.ts","../../../../tfjs-backend-webgl/src/kernels/Cast.ts","../../../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../../../tfjs-backend-webgl/src/clip_gpu.ts","../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgl/src/concat_gpu.ts","../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Imag.ts","../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Concat.ts","../../../../tfjs-backend-webgl/src/conv_gpu.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu.ts","../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgl/src/conv_backprop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgl/src/cum_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Cos.ts","../../../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgl/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgl/src/diag_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Diag.ts","../../../../tfjs-backend-webgl/src/dilation_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../../../tfjs-backend-webgl/src/kernels/Elu.ts","../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Equal.ts","../../../../tfjs-backend-webgl/src/kernels/Erf.ts","../../../../tfjs-backend-webgl/src/kernels/Exp.ts","../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../../../tfjs-backend-webgl/src/fft_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgl/src/kernels/FFT.ts","../../../../tfjs-backend-webgl/src/fill_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Fill.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgl/src/kernels/Floor.ts","../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgl/src/gather_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgl/src/kernels/Greater.ts","../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgl/src/kernels/Less.ts","../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgl/src/kernels/Log.ts","../../../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgl/src/lrn_gpu.ts","../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRN.ts","../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Max.ts","../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Mean.ts","../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Min.ts","../../../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgl/src/kernels/Mod.ts","../../../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgl/src/kernels/Sub.ts","../../../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgl/src/kernels/Neg.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgl/src/onehot_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgl/src/kernels/Pack.ts","../../../../tfjs-backend-webgl/src/pad_gpu.ts","../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../../../tfjs-backend-webgl/src/kernels/Pow.ts","../../../../tfjs-backend-webgl/src/kernels/Prod.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedGather.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedRange.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-webgl/src/kernels/Range.ts","../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgl/src/kernels/Relu.ts","../../../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgl/src/reverse_gpu.ts","../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../../../tfjs-backend-webgl/src/rotate_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgl/src/kernels/Round.ts","../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgl/src/scatter_gpu.ts","../../../../tfjs-backend-webgl/src/scatter_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgl/src/search_sorted_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgl/src/select_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Select.ts","../../../../tfjs-backend-webgl/src/kernels/Selu.ts","../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgl/src/kernels/Sign.ts","../../../../tfjs-backend-webgl/src/kernels/Sin.ts","../../../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgl/src/kernels/Square.ts","../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgl/src/kernels/StaticRegexReplace.ts","../../../../tfjs-backend-webgl/src/kernels/Step.ts","../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-webgl/src/kernels/Tan.ts","../../../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../../../tfjs-backend-webgl/src/kernels/TensorScatterUpdate.ts","../../../../tfjs-backend-webgl/src/tile_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Tile.ts","../../../../tfjs-backend-webgl/src/top_k_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/TopK.ts","../../../../tfjs-backend-webgl/src/transform_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transform.ts","../../../../tfjs-backend-webgl/src/kernels/Unique.ts","../../../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../../../tfjs-backend-webgl/src/segment_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgl/src/register_all_kernels.ts","../../../../tfjs-backend-webgl/src/version.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' &&\n      webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (\n        // tslint:disable-next-line\n        canvas.getContext('webgl', WEBGL_ATTRIBUTES) as WebGLRenderingContext ||\n        (canvas as HTMLCanvasElement)\n            .getContext('experimental-webgl',\n                        WEBGL_ATTRIBUTES) as WebGLRenderingContext);\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex =\n      env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity &&\n      env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  let textureShape: [number, number] = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    textureShape = logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null &&\n      Math.max(...textureShape) > maxSizeForNarrowTex &&\n      Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n      Math.min(...textureShape) > 0;\n\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape =\n          util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n\n  return textureShape;\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1[shape1.length - 1];\n    const shape2Cols = shape2[shape2.length - 1];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack conv2dTranspose op. */\nENV.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but ' +\n            `got ${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_FLUSH_THRESHOLD must be a number but got ' +\n            `${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n                                                              '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext, GPGPUContextProgram} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary extends GPGPUBinaryLocations {\n  webGLProgram: GPGPUContextProgram;\n  program: GPGPUProgram;\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n}\n\nexport interface GPGPUBinaryLocations {\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n  variablesLocations?: GPGPUVariableLocations[];\n}\n\nexport interface GPGPUVariableLocations {\n  name: string;\n  uniform: WebGLUniformLocation;\n  offset: WebGLUniformLocation;\n  shape?: WebGLUniformLocation;\n  texShape?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    gpgpu.buildVao(webGLProgram);\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      variablesLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const variablesLocations: GPGPUVariableLocations[] = [];\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (const varName of program.variableNames) {\n    const varLocs: GPGPUVariableLocations = {\n      name: varName,\n      uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),\n      offset: gpgpu.getUniformLocation(\n          webGLProgram, `offset${varName}`, shouldThrow),\n    };\n    if (program.enableShapeUniforms) {\n      varLocs.shape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      varLocs.texShape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n\n    variablesLocations.push(varLocs);\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    for (const d of program.customUniforms) {\n      customUniformLocations.push(\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));\n    }\n  }\n\n  return {\n    variablesLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n  gpgpu.bindVertexArray(binary.webGLProgram.vao);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  for (let i = 0; i < inputs.length; ++i) {\n    const input = inputs[i];\n    const {\n      uniform: varLoc,\n      offset: varOffsetLoc,\n      shape: varShapeLoc,\n      texShape: varTexShapeLoc,\n    } = binary.variablesLocations[i];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      continue;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      continue;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  }\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    for (let i = 0; i < binary.program.customUniforms.length; ++i) {\n      const d = binary.program.customUniforms[i];\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    }\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject|WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao|null) => void;\n  deleteVertexArray: (vao: WebGLVao|null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl, () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl,\n            () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    const program2 = Object.assign(program, {vao: this.createVertexArray()});\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program2);\n    }\n    return program2;\n  }\n\n  public buildVao(program: GPGPUContextProgram) {\n    this.setProgram(program);\n    this.bindVertexArray(program.vao);\n    const gl = this.gl;\n    // Bind index buffer, and vertex buffers based on program attrib\n    // locations.\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n    gpgpu_util.bindVertexProgramAttributeStreams(\n        gl, program, this.vertexBuffer);\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(\n          boundVao === this.program.vao,\n          'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const bitwiseAndImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a & b));\n\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  bitwiseAndImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  staticRegexReplaceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  // Number of bytes that have been allocated and available for reuse.\n  private _numBytesFree = 0;\n  private freeTextures: Record<string, Texture[]> = {};\n  private usedTextures: Record<string, Texture[]> = {};\n  private logEnabled = false;\n\n  constructor(private readonly gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].pop();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env()\n        .getNumber('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList && texList.indexOf(texture);\n    if (texIndex == null || texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList[texIndex] = texList[texList.length - 1];\n    texList.pop();\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    // TODO: Assign non-null value (empty object) to textures after disposed.\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().getNumber('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const binary of Object.values(this.binaryCache)) {\n      // TODO: Iterating through all binaries to build VAOs is supposed to be in\n      // a seperate function, like 'setVaos'. However, to avoid breaking changes\n      // for the users using parallel compile feature now, buildVao is silently\n      // added here.\n      this.gpgpu.buildVao(binary.webGLProgram);\n\n      const {\n        variablesLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.variablesLocations = variablesLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromGPUData(\n      values: WebGLData, shape: number[], dtype: DataType): Tensor {\n    values.channels = values.channels || 'RGBA';\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as unknown as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType,\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, BitwiseAndInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {bitwiseAndImplCPU as cpuBitwiseAnd} from '../kernel_utils/shared';\n\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\n\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\n\nexport function bitwiseAnd(args: {\n  inputs: BitwiseAndInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if ((backend.shouldExecuteOnCPU([a, b])) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values as TypedArray;\n    const bVals = backend.texData.get(b.dataId).values as TypedArray;\n    const [outValues, outShape] =\n        cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {castImplCPU} from '../kernel_utils/shared';\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\nimport {CLONE, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  const shouldPack: boolean = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      $inputs[0].shape.length > 1;\n\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ?\n        new UnaryOpProgram(inputs[0].shape, CLONE) :\n        new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D($inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    out =\n        backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              ${isChannelsLast?\n             `float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);` :\n             `float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);`}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Conv2DDerInputPackedProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'strides', type: 'vec2' as const },\n  ];\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\nimport {Conv2DDerInputPackedProgram} from '../conv_backprop_packed_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  if (env().getBool('WEBGL_PACK_CONV2DTRANSPOSE') &&\n      $dataFormat === 'channelsLast') {\n    const customValues = [\n      [convInfo.strideHeight, convInfo.strideWidth],\n    ];\n    const program = new Conv2DDerInputPackedProgram(convInfo);\n    return backend.runWebGLProgram(\n        program, [dy, filter], 'float32', customValues);\n  } else {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n  }\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nconst COS_PACKED = `\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const cos =\n    unaryKernelFunc({opSnippet: COS, packedOpSnippet: COS_PACKED});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 0.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently =\n        env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null ||\n        newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext =\n          document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap, 0, 0,\n        width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = (): TensorInfo[] => {\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n      const fusedActivation =\n          activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(\n      convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n      hasLeakyreluAlpha);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as unknown as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n        attrs as unknown as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterPackedProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    const strideString2 = sliceDim > 1 ? 'strides[j + 1]' : 'strides';\n\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${updateSize}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${sliceDim}; j+=2) {\n              ivec4 index = round(${indicesSnippet});\n              flattenedIndex += index.xz * ${strideString};\n              if (j + 1 < ${sliceDim}) {\n                flattenedIndex += index.yw * ${strideString2};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${updatesSnippet};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, found));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {ScatterPackedProgram} from '../scatter_packed_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  let program;\n  if (env().getBool('WEBGL_PACK')) {\n    program = new ScatterPackedProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  } else {\n    program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  }\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nconst SIN_PACKED = `\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const sin =\n    unaryKernelFunc({opSnippet: SIN, packedOpSnippet: SIN_PACKED});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, NamedAttrMap, StaticRegexReplace, StaticRegexReplaceAttrs, StaticRegexReplaceInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {staticRegexReplaceImplCPU} from '../kernel_utils/shared';\n\nexport function staticRegexReplace(args: {\n  inputs: StaticRegexReplaceInputs,\n  backend: MathBackendWebGL,\n  attrs: StaticRegexReplaceAttrs,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  const $x = backend.readSync(x.dataId) as Uint8Array[];\n\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string',\n                                           attrs as unknown as NamedAttrMap);\n\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendWebGL,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape, false, true);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, flattenTensor], flattenTensor.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenTensor);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgl',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {bitwiseAndConfig} from './kernels/BitwiseAnd';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {staticRegexReplaceConfig} from './kernels/StaticRegexReplace';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  bitwiseAndConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  staticRegexReplaceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport {version};\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","pop","length","push","__values","o","s","m","i","__read","r","ar","error","__spreadArray","to","from","pack","arguments","l","slice","concat","PackingScheme","TextureUsage","PhysicalTextureType","contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","customCanvas","newCtx","Error","canvas","env","getBool","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","glany","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","get","logShaderSourceAndInfoLog","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","lineNumberRegex","shaderInfoLog","lineNumberRegexResult","exec","lineNumber","shaderLines","split","pad","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","beforeErrorLines","errorLine","afterErrorLines","join","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","requested","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","textureUnitRange","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","maxSizeForNarrowTex","Infinity","nearestLargerEven","squeezeResult","squeezeShape","newShape","textureShape","isLongNarrowTex","min","batchDim","cols","_a","isEven","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","getWebGLDisjointQueryTimerVersion","hasExtension","isWebGLVersionEnabled","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","isArray","forEach","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","line1","line2","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndexByUniform","variableName","indicesArr","numCoords","symbolicallyComputeStrides","getFlatIndexFrom3D","registerFlag","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","getBroadcastDims","backend_util","makeShader","inputsInfo","outputShape","prefixSnippets","x","shapeInfo","logicalShape","isUniform","name","enableShapeUniforms","getUniformInfoFromShape","packedInputs","texShape","uniformShape","customUniforms","type","arrayIndex","outputSamplingSnippet","floatTextureSetOutputSnippet","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","coordsSnippet","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","coordsFromIndexSnippet_1","shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","coordsFromIndexSnippet_2","getOutput4DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","userCode","texNumR","texNumC","offset","getFlatOffsetUniformName","_b","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","texNumR_1","texNumC_1","keptDims","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify","getUniformLocations","gpgpu","webGLProgram","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","nanLoc","variablesLocations","customUniformLocations","infLoc","shouldThrow","_c","variableNames","_d","varName","varLocs","uniform","_e","_f","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","DecodeMatrixProgram","packedOutput","outPackingScheme","DENSE","DecodeMatrixPackedProgram","EncodeFloatProgram","outTexUsage","DOWNLOAD","EncodeFloatPackedProgram","CHANNEL_CHAR_TO_INDEX_MAP","R","G","B","A","EncodeMatrixProgram","inputIsUnsignedByte","usedChannels","mainLoop","usedChannelIndex","curChannel","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texStorage2D","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","outputTexture","disposed","itemsToPoll","glVersion","gl2_1","createVertexArray","bindVertexArray","vao","deleteVertexArray","getVertexArray","VERTEX_ARRAY_BINDING","ext_1","createVertexArrayOES","bindVertexArrayOES","deleteVertexArrayOES","VERTEX_ARRAY_BINDING_OES","COLOR_BUFFER_FLOAT","parallelCompilationExtension","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","defineProperty","dispose","_this","warn","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","deleteMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","createBufferFromTexture","bindTextureToFrameBuffer","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","gl2_2","sync_1","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","gpgpu_util.downloadMatrixFromPackedOutputTexture","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","program2","assign","debug","webgl_util.validateProgram","buildVao","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","getAttributeLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","webgl_util.validateFramebuffer","executeProgram","boundVao","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","ext_2","query_1","createQuery","TIME_ELAPSED_EXT","ext","createQueryEXT","beginQueryEXT","endQueryEXT","ext_3","waitForQueryAndGetTime","repeatedTry","getQueryTime","queryTimerVersion","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","addItemToPoll","pollItems","arr","linearSearchLastTrue","isDoneFn","resolveFn","scheduleFn","undefined","platform","setTimeoutCustom","bind","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","createSimpleBinaryKernelImpl","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","bitwiseAndImpl","createSimpleUnaryImpl","values","attrs","newValues","getArrayFromDType","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","dim","splits","lastSplit","validateSplits","nrows","rowLength","start","limit","outDim","outSplitsOutDim","delta","j","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","valueSlices_1","valueSlices_1_1","writeValueSlices","INT32_MAX","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape_1","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","shape_1","shape_1_1","rsqrtImpl","sqrt","sigmoidImpl","sqrtImpl","staticRegexReplaceImpl","pattern","replaceGlobal","rewrite","replace","RegExp","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","this_1","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","this_2","nGrams","outputStartIdx","this_3","dataLength","delimiters","skipEmpty","tokenStart","token","delimiter","subImpl","comparePair","valueDiff","select","array","k","left","right","i_1","z","sd","sign","swap","addImplCPU","shared.addImpl","bincountImplCPU","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","bincountReduceImplCPU","xBuf","weightsBuf","binaryOutput","numCols","outBuf","bitwiseAndImplCPU","shared.bitwiseAndImpl","castImplCPU","inputType","Int32Array","zero","toTypedArray","resultData","ceilImplCPU","shared.ceilImpl","concatImplCPU","simplyConcat","offset_1","vals","colOffset_1","decodedData","fromUint8ToStringArray","tIdx","resIdx","equalImplCPU","shared.equalImpl","expImplCPU","shared.expImpl","expm1ImplCPU","shared.expm1Impl","floorImplCPU","shared.floorImpl","gatherNdImplCPU","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","gatherV2ImplCPU","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImplCPU","shared.greaterImpl","greaterEqualImplCPU","shared.greaterEqualImpl","lessImplCPU","shared.lessImpl","lessEqualImplCPU","shared.lessEqualImpl","linSpaceImplCPU","stop","logImplCPU","shared.logImpl","maxImplCPU","reduceSize","Number","isNaN","maximumImplCPU","shared.maximumImpl","minimumImplCPU","shared.minimumImpl","multiplyImplCPU","shared.multiplyImpl","negImplCPU","xShape","xDtype","minusOne","createScalarValue","notEqualImplCPU","shared.notEqualImpl","prodImplCPU","reductionAxes","computeOutAndReduceShapes","reduceShape","outDtype","upcastType","prod_1","raggedGatherImplCPU","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","raggedRangeImplCPU","starts","startsShape","startsDType","limits","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","raggedTensorToTensorImplCPU","shapesShape","rangeImplCPU","rsqrtImplCPU","shared.rsqrtImpl","scatterImplCPU","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","TensorBuffer","sigmoidImplCPU","shared.sigmoidImpl","simpleAbsImplCPU","resultValues","sliceImplCPU","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","sparseFillEmptyRowsImplCPU","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","outputIndices","outputValues","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImplCPU","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","id","sparseSegmentReductionImplCPU","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImplCPU","shared.sqrtImpl","staticRegexReplaceImplCPU","shared.staticRegexReplaceImpl","stridedSliceImplCPU","newLoc","stringNGramsImplCPU","dataSplits","stringSplitImplCPU","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImplCPU","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImplCPU","shared.subImpl","tileImplCPU","reps","topKImplCPU","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","transposeImplCPU","perm","xRank","xSize","newStrides","uniqueImplCPU","axis","$axis","parseAxisParam","uniqueElements","Map","inputBuffer","uniqueIndices","is1DTensor","element","axisValues","existingIndex","uniqueIndex","outputTmpShape","outputBuffer","uniqueElementIndex","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","getOutput","getSourceCoordsArr","dims","coord","cond","innerDims","sourceCoords","ReshapePackedProgram","thisRC","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","TextureManager","numUsedTextures","numFreeTextures","_numBytesAllocated","_numBytesFree","freeTextures","usedTextures","logEnabled","acquireTexture","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","newTexture","texBytes","computeBytes","newTexture_1","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","releaseTexture","logicalTexType","deleteTexThreshold","texList","texIndex","total","freeRatio","round","getNumUsedTextures","getNumFreeTextures","tex","internalFormatForPhysicalTexType","bytesPerElement","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","CHECK_NAN_SNIPPET","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","_super","gpuResource","newGPGPU","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","pendingDeletes","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","String","__","constructor","create","__extends","nextDataId","numDataIds","writeTexture","texHeight","texWidth","makeTensorInfo","inData","dataId","webgl_util.getShapeAs3D","runWebGLProgram","disposeIntermediateTensorInfo","write","checkNumericalProblems","refCount","has","incRef","decRef","move","tensorInfo","disposeData","readSync","complexTensorInfos","unary_op.CLONE","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","read","subscribers_1","tmpDownloadTarget","decode","tmpData","tex_util.getDenseTexShape","all","ps","gl_1","dTypeVals","subscribers","delete","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","bufferSync","strings","decodeString","webgl_util.canBeRepresented","tmpData_1","vals_1","shouldUsePackedProgram","timerAvailable","time","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","kernelMs","wallMs","kernelMs_1","sum","ms","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","startMs","endMs","endTimer","timerQuery","force","add","releaseGPUData","key","origDataId","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","sizeThreshold","every","getGPGPUContext","where","condition","condVals","packedUnaryOp","outInfo","compileAndRun","outValues","makeOutput","unary_op.ABS","isString","encodedValues","unpackTensor","packTensor","packedReshape","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","customValues","texSize","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","outData","tex_util.PackingScheme","texelShape","dataToDispose","inputsData","uniformValues","webgl_util.isReshapeFree","savedInput","outputData","keyInputs","hasOffset","xTexShape","shader_compiler.getUniformInfoFromShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","inShapeInfos","source","shader_compiler.makeShader","gpgpu_math.compileProgram","outTex","uniform1f","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","gpgpu_math.runProgram","info","glFlushThreshold","unpacked","getBinary","getTextureManager","keys","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","scalar","epsilon","webgl_util.getTextureShapeFromLogicalShape","isByteArray","Uint8ClampedArray","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","mb","toFixed","checkCompileCompletion","entries","checkCompletion_","checkCompileCompletionAsync","checkCompletionAsync_","_g","COMPLETION_STATUS_KHR","nextFrame","webgl_util.logShaderSourceAndInfoLog","createTensorFromGPUData","backend","isTexture","makeTensorFromDataId","KernelBackend","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","CHECK_NAN_SNIPPET_PACKED","BinaryOpPackedProgram","checkOutOfBounds","supportsBroadcasting","checkOutOfBoundsString","identity","args","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","mapActivationToShaderProgram","activation","packed","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","inputs_1","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","transposeImpl","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","intermediates_1","intermediates_1_1","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","xtexData","xUnPacked","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPool3DGradConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","getCoords","coordSum","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","parseSliceParams","$begin","$size","assertParamsValid","newTexData","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","prod","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","bitwiseAndConfig","BitwiseAnd","versionNumber","cpuBitwiseAnd","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","hasEncodingLoss","resultShape","resultType","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","shift","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shift_1","shiftedChannels","channelIdx","imagConfig","Imag","concatImpl","reals","imags","realConcated","imagConcated","result_1","runOnCpu","tensors2D_1","innerSize","inputsValShapes","outShape_1","finalOutShape","$inputs","shouldPack","program_1","maxTexturesInShader","reducedInputs","subArray","result_2","reducedInputs_1","reducedInputs_1_1","program_2","tensors2D","computeTensors2D","reshapedResult","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Conv2DPackedProgram","hasLeakyReluAlpha","texelsAcross","texelC","colIndex","nextTexelOffset","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","getShapeForBatchMatMul","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","xReshaped_1","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","xReshaped","conv2dWithIm2Row","x2ColShape","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","intermediates_2","intermediates_2_1","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","Conv2DDerInputPackedProgram","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","CumOpType","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumProgram","exclusive","reverse","initVal","Prod","val","idxString","getFinalCoord","cumImpl","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","channelMul","DepthwiseConvPacked2DProgram","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","decodeEinsumEquation","allDims","summedDims","idDims","checkEinsumDimSizes","getEinsumComputePath","path","steps","nSteps","numDimsRemaining","tensorsToDispose","e_1","idTerm","getEinsumPermutation","dimsToExpand","isIdentityPermutation","splice","tensorsToDispose_1","tensorsToDispose_1_1","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","expConfig","Exp","expandDims","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","opString","exponentMultiplierSnippet","PI","resultDenominator","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","inferDtype","fromPixels2DContext","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","newWillReadFrequently","willReadFrequently","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","prepareInputs","alignInputWithDataFormat","alignedInput","inputs_2","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","gatherNdConfig","GatherNd","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","batchDims","parsedAxis","indicesVals","axisDim_1","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","powOperator","rad","maxD","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxImpl","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGradConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","$starts","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","sourceFracIndexRC","effectiveInSize","effectiveOutSize","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","defaultIsTensor","stridesType","indicesString","indicesSnippet","updatesString","updatesSnippet","defaultValuesString","defaultValueSnippet","strideString","ScatterPackedProgram","strideString2","scatterNdConfig","ScatterNd","calculateShapes","SearchSortedProgram","numInputs","side","webGL1LoopHead","loopHead","boundComparator","searchSortedConfig","SearchSorted","sortedSequence","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","SQRT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","staticRegexReplaceConfig","StaticRegexReplace","stringInput","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis_1","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","sliceInfo","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","tensorScatterUpdateConfig","TensorScatterUpdate","flattenTensor","TileProgram","tile","buf","tileConfig","Tile","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xIsPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","prevIndices_1","prevValues","TransformProgram","interpolation","fillMode","fillModeId","interpolationModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfigs_1","kernelConfigs_1_1","kernelConfig","registerKernel"],"mappings":"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kC,EAAUykC,EAAclnF,KAAKC,KAAKgX,EAASurC,GACjDxnD,KAAKyU,YAAc,CAACy2B,EAAWuc,GAE/B,IAGMC,EAAqD,EAA7B1iD,KAAKirB,MAAMu3B,EAAa,GAChDG,EAA0BH,EAAa,EAEvCI,EAAgB,sDAIlBukC,EAAwB,GACxBlwE,EAASurC,EAAa,IACxB2kC,EAAwB,uCAAA3qF,OACMya,EAAM,kEAMtC,IAAImwE,EAA4B,GAC5BnwE,EAASurC,EAAa,IACxB4kC,EAA4B,uCAAA5qF,OACEya,EAAM,mDAMtCjc,KAAK2Z,SAAW,oDA5BY,MA6B6B,+DAAAnY,OAGnD2qF,EAKA,2GAAA3qF,OAAA4qF,oQASEF,EAAW,eAAA1qF,OAAcgmD,EACmB,+DAAAhmD,OAAA0qF,kFAI1BxkC,EAAqB,2lBAAAlmD,OAgBvComD,EAGqB,kDAAApmD,OAAAkmD,EACnB,mBAAAlmD,OAA4B,IAA5BmmD,EAA6B,8aAAAnmD,OAiB/BomD,EACS,yBAAApmD,OAA4B,IAA5BmmD,EAA6B,obAAAnmD,OAetComD,EACS,yBAAApmD,OAA4B,IAA5BmmD,EAA6B,+eAAAnmD,OAetComD,EAEQ,mCAAApmD,OAzHI,+BA4HrB,ECnDI,UCiFD6qF,GAAgC,CACpCz/B,GACAE,GACAG,GACAG,GACAK,GACAQ,GACAS,GACAI,GACA2B,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAkC,GACAQ,GACAW,GACAI,GACAE,GACAW,GACAuB,GACAkB,GACAG,GACAI,GACAY,GACAa,GACAI,GACA7X,GACAqY,GACA4C,GACAwC,GACAW,GACAG,GACAE,GACAG,GACAG,GACAI,GACAG,GACAsB,GACAoB,GACAE,GACAE,GACAS,GACAQ,GACAK,GACAE,GACAG,GACAI,GACAG,GACAuB,GACAE,GACAG,GACAS,GACAE,GACAI,GACAG,GACAe,GACAK,GACAG,GACAG,GACAG,GACAI,GACAa,GACAM,GACAK,GACAkB,GACAG,GACAG,GACA9sB,GACAgtB,GACAlT,GACAqT,GACAG,GACAE,GACA3sB,GACA8sB,GACAG,GACAE,GACAE,GACAG,GACAG,GACAG,GACAG,GACAU,GACAI,GACAQ,GACAG,GACAE,GACAG,GACAI,GACAK,GACAK,GACAI,GACAO,GACAG,GACAS,GACAG,GACAsB,GACArwB,GACA0wB,GACAG,GACAU,GACAK,GACAhf,GACAuf,GACAK,GACAG,GACAU,GACAG,GACA32B,GACA62B,GACAC,GACAS,GACAO,GACAO,GACApiB,GACAuc,GACAgG,GACAG,GACAG,GACAr1B,GACAk2B,GACAe,GACAK,GACAG,GACAa,GACAM,GACAM,GACAG,GACAkB,GACAS,GACAS,GACAK,GACAG,GACAE,GACAE,GACAG,GACArsB,GACA0f,GACA8M,GACAE,GACAQ,GACAI,GACAI,GACAK,GACAE,GACAK,GACAO,GACAG,GACAI,GACAE,GACAG,GACAM,GACAgB,GACAG,GACAI,GACArS,GACAhsB,GACAw+B,GACAG,GACAE,GACAM,GACAO,GACAuB,GACA7gC,GACAghC,GACAE,GDzPoD,CACpDppC,WAAY6pC,EAAkBA,mBAC9B3pC,YAAa,QACbC,WArFI,SAA6BL,GAK1B,IAAA3kC,EAA0B2kC,EAAI3kC,OAAtB4jC,EAAkBe,EAAIf,QAAblyB,EAASizB,QAC1B5tC,EAAiBiJ,EAAMjJ,EAApB80B,EAAc7rB,EAAM6rB,WACvByiD,EAAe58D,EAAK48D,YAErBr/C,EAAQl4B,EAAEhQ,MAAMrE,OAEhB+3D,EAAY,GAEdprB,EAAO,EACL03B,EAAcrwD,EAAAA,aAAas1C,mBAAmB,CAAC3c,GAAOJ,GACxD+hB,EAAYj6C,EACG,MAAfgwD,IACF/V,EAAYnE,GAAU,CAAC7sC,OAAQ,CAACjJ,EAACA,GAAG6sC,QAAOA,EAAElyB,MAAO,CAACsd,KAAM+3B,KAC3DtM,EAAU93D,KAAKquD,GACf3hB,EAAO34B,EAAYA,aAACy1C,iBAAiB,EAAGld,GAAO,IAGjD,IAAM12B,EAAW7B,EAAYA,aAACq6D,aAAajT,gBACvC9M,EAAUjqD,MAAOsoC,EAAMi/C,GACrBjwE,EAASpX,EAAIA,KAACC,cAAc,CAAC8pD,EAAUjqD,MAAMsoC,KAC7C4hB,EACF32B,GAAQ,CAACta,OAAQ,CAACjJ,EAAGi6C,GAAYpN,QAAOA,EAAElyB,MAAO,CAAC3qB,MAAO,EAAE,EAAGsX,MAClEo8C,EAAU93D,KAAKsuD,GAEf,IAAM09B,EAAcliC,EAAAA,WAAW11C,EAAExC,OAE3Bq6E,EACF,SAAC73E,EAAes3E,EAAiCxiD,EAChDt3B,EAAiB+5E,GAChB,IAAMhhD,EAAYv2B,EAAEhQ,MAAM,GACpBsX,EAAStH,EAAEhQ,MAAM,GACjB6iD,EACFlzC,EAAAA,aAAaq6D,aAAa8d,8BACtBxwE,EAAQiwE,GAEV1hF,EAAU,IAAIuhF,GADF,CAACvkC,aAAYvrC,OAAMA,EAAEivB,UAASA,EAAEghD,YAAWA,GACbD,GAC1Cr5E,EAAS4uC,EAAQ1G,cAActwC,EAAS,CAACmK,EAAG80B,GAAat3B,GAG/D,GAFAkmD,EAAU93D,KAAKqS,GAEXA,EAAOjO,MAAM,KAAOunF,EACtB,OAAOt5E,EAET,IAAM85E,EAAY5Q,GAAM,CACtBt6B,QAAOA,EACPlyB,MAAO,CAACuC,MAAO,EAAG4P,KAAMyqD,EAAa1tF,KAAM,EAAG2T,MAAO,aAEjDw6E,EAAWnD,GAAK,CACpB5rE,OAAQ,CAACjJ,EAAG+3E,GACZlrC,QAAOA,EACPlyB,MAAO,CAAC0c,KAAM,CAAC/vB,EAASurC,MAQ1B,OALA6Q,EAAU93D,KAAKmsF,GACfr0B,EAAU93D,KAAKosF,GAGXH,EAAa55E,EAAQq5E,EAAWU,EAAUx6E,EAAO+5E,EAEvD,EAKE17B,EACFt4B,GAAQ,CAACta,OAAQ,CAACjJ,EAJF63E,EAChB39B,EAAK,qBAAsBplB,EAAY8iD,EAAaL,IAGjB1qC,QAAOA,EAAElyB,MAAO,CAAC3qB,MAAOwR,KAE3DvX,EAAS4xD,EACb,GAAmB,MAAfmU,EAAqB,CACvBtM,EAAU93D,KAAKiwD,GACf,IAAM5jB,EAAOt4B,EAAAA,aAAa0wD,uBAAuBL,GACjD/lE,EAAS6rD,GAAU,CAAC7sC,OAAQ,CAACjJ,EAAG/V,GAAS4iD,QAAOA,EAAElyB,MAAO,CAACsd,KAAIA,IAC/D,CAGD,OADAyrB,EAAUpmD,SAAQ,SAAA7S,GAAK,OAAAoiD,EAAQvM,8BAA8B71C,EAAtC,IAChBR,CACT,GC6PEu6E,QAGF,IAA2B,IAAAyT,GAAApsF,EAAA6rF,kBAAeQ,GAAAhuF,KAAAguF,GAAAD,GAAAnuF,OAAA,CAArC,IAAMquF,GAAYD,GAAAtuF,MACrBwuF,EAAcA,eAACD,GAChB,4NC1We","x_google_ignoreList":[0]}