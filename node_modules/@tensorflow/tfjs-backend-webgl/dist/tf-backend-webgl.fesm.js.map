{"version":3,"file":"tf-backend-webgl.fesm.js","sources":["../../../../tfjs-backend-webgl/src/canvas_util.ts","../../../../tfjs-backend-webgl/src/tex_util.ts","../../../../tfjs-backend-webgl/src/webgl_util.ts","../../../../tfjs-backend-webgl/src/flags_webgl.ts","../../../../tfjs-backend-webgl/src/glsl_version.ts","../../../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../../../tfjs-backend-webgl/src/shader_compiler.ts","../../../../tfjs-backend-webgl/src/gpgpu_math.ts","../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/gpgpu_util.ts","../../../../tfjs-backend-webgl/src/gpgpu_context.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/BitwiseAnd.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../../tfjs-backend-cpu/src/shared.ts","../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgl/src/packing_util.ts","../../../../tfjs-backend-webgl/src/pack_gpu.ts","../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../../../tfjs-backend-webgl/src/texture_manager.ts","../../../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/unpack_gpu.ts","../../../../tfjs-backend-webgl/src/backend_webgl.ts","../../../../tfjs-backend-webgl/src/version.ts","../../../../tfjs-backend-webgl/src/webgl.ts","../../../../tfjs-backend-webgl/src/base.ts","../../../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Identity.ts","../../../../tfjs-backend-webgl/src/kernels/Complex.ts","../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../../../tfjs-backend-webgl/src/mean_gpu.ts","../../../../tfjs-backend-webgl/src/reduce_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgl/src/transpose_gpu.ts","../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgl/src/kernels/Abs.ts","../../../../tfjs-backend-webgl/src/kernels/Acos.ts","../../../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../../../tfjs-backend-webgl/src/kernels/Add.ts","../../../../tfjs-backend-webgl/src/addn_gpu.ts","../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AddN.ts","../../../../tfjs-backend-webgl/src/kernels/All.ts","../../../../tfjs-backend-webgl/src/kernels/Any.ts","../../../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgl/src/kernels/Asin.ts","../../../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../../../tfjs-backend-webgl/src/kernels/Atan.ts","../../../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../../../tfjs-backend-webgl/src/pool_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../../../tfjs-backend-webgl/src/slice_gpu.ts","../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Slice.ts","../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../../../tfjs-backend-webgl/src/kernels/BitwiseAnd.ts","../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgl/src/kernels/Real.ts","../../../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../../../tfjs-backend-webgl/src/kernels/Cast.ts","../../../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../../../tfjs-backend-webgl/src/clip_gpu.ts","../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgl/src/concat_gpu.ts","../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Imag.ts","../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Concat.ts","../../../../tfjs-backend-webgl/src/conv_gpu.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu.ts","../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgl/src/conv_backprop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgl/src/kernels/Cos.ts","../../../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgl/src/cum_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgl/src/diag_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Diag.ts","../../../../tfjs-backend-webgl/src/dilation_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../../../tfjs-backend-webgl/src/kernels/Elu.ts","../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Equal.ts","../../../../tfjs-backend-webgl/src/kernels/Erf.ts","../../../../tfjs-backend-webgl/src/kernels/Exp.ts","../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../../../tfjs-backend-webgl/src/fft_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgl/src/kernels/FFT.ts","../../../../tfjs-backend-webgl/src/fill_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Fill.ts","../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgl/src/kernels/Floor.ts","../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgl/src/gather_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgl/src/kernels/Greater.ts","../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgl/src/kernels/Less.ts","../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgl/src/kernels/Log.ts","../../../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgl/src/lrn_gpu.ts","../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRN.ts","../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Max.ts","../../../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Mean.ts","../../../../tfjs-backend-webgl/src/kernels/Min.ts","../../../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgl/src/kernels/Mod.ts","../../../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgl/src/kernels/Sub.ts","../../../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgl/src/kernels/Neg.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgl/src/onehot_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgl/src/kernels/Pack.ts","../../../../tfjs-backend-webgl/src/pad_gpu.ts","../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../../../tfjs-backend-webgl/src/kernels/Pow.ts","../../../../tfjs-backend-webgl/src/kernels/Prod.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedGather.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedRange.ts","../../../../tfjs-backend-webgl/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-webgl/src/kernels/Range.ts","../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgl/src/kernels/Relu.ts","../../../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgl/src/reverse_gpu.ts","../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../../../tfjs-backend-webgl/src/rotate_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgl/src/kernels/Round.ts","../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgl/src/scatter_gpu.ts","../../../../tfjs-backend-webgl/src/scatter_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgl/src/search_sorted_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgl/src/select_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Select.ts","../../../../tfjs-backend-webgl/src/kernels/Selu.ts","../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgl/src/kernels/Sign.ts","../../../../tfjs-backend-webgl/src/kernels/Sin.ts","../../../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgl/src/kernels/Square.ts","../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgl/src/kernels/StaticRegexReplace.ts","../../../../tfjs-backend-webgl/src/kernels/Step.ts","../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-webgl/src/kernels/Tan.ts","../../../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../../../tfjs-backend-webgl/src/kernels/TensorScatterUpdate.ts","../../../../tfjs-backend-webgl/src/tile_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Tile.ts","../../../../tfjs-backend-webgl/src/top_k_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/TopK.ts","../../../../tfjs-backend-webgl/src/transform_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transform.ts","../../../../tfjs-backend-webgl/src/kernels/Unique.ts","../../../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../../../tfjs-backend-webgl/src/segment_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgl/src/register_all_kernels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' &&\n      webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (\n        // tslint:disable-next-line\n        canvas.getContext('webgl', WEBGL_ATTRIBUTES) as WebGLRenderingContext ||\n        (canvas as HTMLCanvasElement)\n            .getContext('experimental-webgl',\n                        WEBGL_ATTRIBUTES) as WebGLRenderingContext);\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex =\n      env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity &&\n      env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  let textureShape: [number, number] = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    textureShape = logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null &&\n      Math.max(...textureShape) > maxSizeForNarrowTex &&\n      Math.min(...textureShape) <= (isPacked ? 2 : 1) &&\n      Math.min(...textureShape) > 0;\n\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape =\n          util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n\n  return textureShape;\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1[shape1.length - 1];\n    const shape2Cols = shape2[shape2.length - 1];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack conv2dTranspose op. */\nENV.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but ' +\n            `got ${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (!(typeof threshold === 'number')) {\n        throw new Error('WEBGL_FLUSH_THRESHOLD must be a number but got ' +\n            `${threshold}.`);\n      }\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` :\n                                                              '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext, GPGPUContextProgram} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary extends GPGPUBinaryLocations {\n  webGLProgram: GPGPUContextProgram;\n  program: GPGPUProgram;\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n}\n\nexport interface GPGPUBinaryLocations {\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n  variablesLocations?: GPGPUVariableLocations[];\n}\n\nexport interface GPGPUVariableLocations {\n  name: string;\n  uniform: WebGLUniformLocation;\n  offset: WebGLUniformLocation;\n  shape?: WebGLUniformLocation;\n  texShape?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    gpgpu.buildVao(webGLProgram);\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      variablesLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const variablesLocations: GPGPUVariableLocations[] = [];\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (const varName of program.variableNames) {\n    const varLocs: GPGPUVariableLocations = {\n      name: varName,\n      uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),\n      offset: gpgpu.getUniformLocation(\n          webGLProgram, `offset${varName}`, shouldThrow),\n    };\n    if (program.enableShapeUniforms) {\n      varLocs.shape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      varLocs.texShape = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n\n    variablesLocations.push(varLocs);\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    for (const d of program.customUniforms) {\n      customUniformLocations.push(\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));\n    }\n  }\n\n  return {\n    variablesLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n  gpgpu.bindVertexArray(binary.webGLProgram.vao);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  for (let i = 0; i < inputs.length; ++i) {\n    const input = inputs[i];\n    const {\n      uniform: varLoc,\n      offset: varOffsetLoc,\n      shape: varShapeLoc,\n      texShape: varTexShapeLoc,\n    } = binary.variablesLocations[i];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      continue;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      continue;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  }\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    for (let i = 0; i < binary.program.customUniforms.length; ++i) {\n      const d = binary.program.customUniforms[i];\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    }\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nconst CHANNEL_CHAR_TO_INDEX_MAP: Record<string, number> = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false,\n      usedChannels = 'RGBA') {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length;\n         usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject|WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao|null) => void;\n  deleteVertexArray: (vao: WebGLVao|null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl, () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(\n            gl,\n            () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(\n            gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    const program2 = Object.assign(program, {vao: this.createVertexArray()});\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program2);\n    }\n    return program2;\n  }\n\n  public buildVao(program: GPGPUContextProgram) {\n    this.setProgram(program);\n    this.bindVertexArray(program.vao);\n    const gl = this.gl;\n    // Bind index buffer, and vertex buffers based on program attrib\n    // locations.\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n    gpgpu_util.bindVertexProgramAttributeStreams(\n        gl, program, this.vertexBuffer);\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(\n          boundVao === this.program.vao,\n          'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const bitwiseAndImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a & b));\n\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Shared functionality among backends.\nexport {simpleAbsImpl} from './kernels/Abs';\nexport {addImpl} from './kernels/Add';\nexport {bincountImpl, bincountReduceImpl} from './kernels/Bincount_impl';\nexport {bitwiseAndImpl} from './kernels/BitwiseAnd';\nexport {castImpl} from './kernels/Cast';\nexport {ceilImpl} from './kernels/Ceil';\nexport {concatImpl} from './kernels/Concat_impl';\nexport {equalImpl} from './kernels/Equal';\nexport {expImpl} from './kernels/Exp';\nexport {expm1Impl} from './kernels/Expm1';\nexport {floorImpl} from './kernels/Floor';\nexport {floorDivImpl} from './kernels/FloorDiv';\nexport {gatherNdImpl} from './kernels/GatherNd_Impl';\nexport {gatherV2Impl} from './kernels/GatherV2_impl';\nexport {greaterImpl} from './kernels/Greater';\nexport {greaterEqualImpl} from './kernels/GreaterEqual';\nexport {lessImpl} from './kernels/Less';\nexport {lessEqualImpl} from './kernels/LessEqual';\nexport {linSpaceImpl} from './kernels/LinSpace_impl';\nexport {logImpl} from './kernels/Log';\nexport {maxImpl} from './kernels/Max_impl';\nexport {maximumImpl} from './kernels/Maximum';\nexport {minimumImpl} from './kernels/Minimum';\nexport {multiplyImpl} from './kernels/Multiply';\nexport {negImpl} from './kernels/Neg';\nexport {notEqualImpl} from './kernels/NotEqual';\nexport {prodImpl} from './kernels/Prod';\nexport {raggedGatherImpl} from './kernels/RaggedGather_impl';\nexport {raggedRangeImpl} from './kernels/RaggedRange_impl';\nexport {raggedTensorToTensorImpl} from './kernels/RaggedTensorToTensor_impl';\nexport {rangeImpl} from './kernels/Range_impl';\nexport {rsqrtImpl} from './kernels/Rsqrt';\nexport {scatterImpl} from './kernels/Scatter_impl';\nexport {sigmoidImpl} from './kernels/Sigmoid';\nexport {sliceImpl} from './kernels/Slice';\nexport {sparseFillEmptyRowsImpl} from './kernels/SparseFillEmptyRows_impl';\nexport {sparseReshapeImpl} from './kernels/SparseReshape_impl';\nexport {sparseSegmentReductionImpl} from './kernels/SparseSegmentReduction_impl';\nexport {sqrtImpl} from './kernels/Sqrt';\nexport {squaredDifferenceImpl} from './kernels/SquaredDifference';\nexport {staticRegexReplaceImpl} from './kernels/StaticRegexReplace';\nexport {stridedSliceImpl} from './kernels/StridedSlice_impl';\nexport {stringNGramsImpl} from './kernels/StringNGrams_impl';\nexport {stringSplitImpl} from './kernels/StringSplit_impl';\nexport {stringToHashBucketFastImpl} from './kernels/StringToHashBucketFast_impl';\nexport {subImpl} from './kernels/Sub';\nexport {tileImpl} from './kernels/Tile_impl';\nexport {topKImpl} from './kernels/TopK_impl';\nexport {transposeImpl} from './kernels/Transpose_impl';\nexport {uniqueImpl} from './kernels/Unique_impl';\nexport {ComplexBinaryKernelImpl, SimpleBinaryKernelImpl} from './utils/binary_types';\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  bitwiseAndImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  raggedGatherImplCPU,\n  raggedRangeImplCPU,\n  raggedTensorToTensorImplCPU,\n  scatterImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  staticRegexReplaceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, Texture, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  // Number of bytes that have been allocated and available for reuse.\n  private _numBytesFree = 0;\n  private freeTextures: Record<string, Texture[]> = {};\n  private usedTextures: Record<string, Texture[]> = {};\n  private logEnabled = false;\n\n  constructor(private readonly gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): Texture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].pop();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: Texture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: Texture, shape: [number, number], logicalTexType: TextureUsage,\n      isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env()\n        .getNumber('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList && texList.indexOf(texture);\n    if (texIndex == null || texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList[texIndex] = texList[texList.length - 1];\n    texList.pop();\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    // TODO: Assign non-null value (empty object) to textures after disposed.\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util, WebGLData} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  override numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(\n      texture: WebGLTexture, shape: number[], dtype: DataType,\n      texHeight: number, texWidth: number, channels: string): DataId {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n\n    // Bind texture to the input tensor.\n    inData.texture = {texture, texShape: [texHeight, texWidth]};\n    inData.texShape = [texHeight, texWidth];\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program =\n        new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output =\n        this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n\n    return output.dataId;\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  override incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  override async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  override readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}):\n      GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  override timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  override time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  override memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().getNumber('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  override floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const binary of Object.values(this.binaryCache)) {\n      // TODO: Iterating through all binaries to build VAOs is supposed to be in\n      // a seperate function, like 'setVaos'. However, to avoid breaking changes\n      // for the users using parallel compile feature now, buildVao is silently\n      // added here.\n      this.gpgpu.buildVao(binary.webGLProgram);\n\n      const {\n        variablesLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.variablesLocations = variablesLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  override createTensorFromGPUData(\n      values: WebGLData, shape: number[], dtype: DataType): Tensor {\n    values.channels = values.channels || 'RGBA';\n    const {texture, height, width, channels} = values;\n    const backend = engine().backend as MathBackendWebGL;\n\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(\n          `The texture is invalid. Also, please make sure the texture and ` +\n          `the TFJS WebGL backend are using the same canvas. If you want to ` +\n          `use your own custom canvas, you have to create and use the custom ` +\n          `TFJS WebGL backend created from the canvas through ` +\n          `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n\n    const dataId =\n        backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport {version};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as unknown as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType,\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, BitwiseAndInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {bitwiseAndImplCPU as cpuBitwiseAnd} from '../kernel_utils/shared';\n\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\n\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\n\nexport function bitwiseAnd(args: {\n  inputs: BitwiseAndInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if ((backend.shouldExecuteOnCPU([a, b])) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values as TypedArray;\n    const bVals = backend.texData.get(b.dataId).values as TypedArray;\n    const [outValues, outShape] =\n        cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {castImplCPU} from '../kernel_utils/shared';\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\nimport {CLONE, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  const shouldPack: boolean = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      $inputs[0].shape.length > 1;\n\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ?\n        new UnaryOpProgram(inputs[0].shape, CLONE) :\n        new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n\n    return result;\n  }\n\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D($inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n import {backend_util, util} from '@tensorflow/tfjs-core';\n\n import {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\n export class Conv2DPackedProgram implements GPGPUProgram {\n   variableNames = ['x', 'W'];\n   packedInputs = true;\n   packedOutput = true;\n   outputShape: number[];\n   userCode: string;\n   enableShapeUniforms: boolean;\n   customUniforms = [\n     {name: 'pads', type: 'ivec2' as const },\n     {name: 'strides', type: 'ivec2' as const },\n     {name: 'dilations', type: 'ivec2' as const },\n     {name: 'inDims', type: 'ivec2' as const },\n   ];\n\n   constructor(\n       convInfo: backend_util.Conv2DInfo, addBias = false,\n       activation: string = null, hasPreluActivation = false,\n       hasLeakyReluAlpha = false) {\n     this.outputShape = convInfo.outShape;\n     this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n     const padLeft = convInfo.padInfo.left;\n     const strideWidth = convInfo.strideWidth;\n     const dilationWidth = convInfo.dilationWidth;\n     const filterHeight = convInfo.filterHeight;\n     const filterWidth = convInfo.filterWidth;\n     const texelsAcross = filterWidth;\n\n     let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n     }\n\n     /**\n      * This vectorized implementation works by gathering the values needed for\n      * each output channel's dot product into vec4's and then multiplying them\n      * all together (this happens in the final double for-loop below). Most of\n      * the main loop consists of constructing these vec4's with the minimum\n      * number of texture2D calls, which means making use of all four returned\n      * values from a texture2D call at once.\n      */\n     mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n     for (let c = 0; c < filterWidth; c++) {\n       mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n     }\n     mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n\n     for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n       const colIndex = texelC * 2;\n\n       mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n\n       if (strideWidth === 1) {\n         if (colIndex < filterWidth) {\n           // If padding is odd, the outer texels have to be composed.\n           if (padLeft % 2 === 1) {\n             // TODO: Ensure vec4 previous does not result in redundant sample,\n             // and avoid setting xTexelRC's that exceed the boundary in the\n             // first place rather than resetting them to vec4(0)).\n\n             // To compute xCOffset:\n             // - If padding is odd, we must add 1 to ensure we ask for an\n             // even-numbered row.\n             // - We subtract 2 to access the previous texel.\n\n             mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n             // This texel has been read in previous iteration if the dilation\n             // is 1.\n             if (dilationWidth === 1 && colIndex > 0) {\n               mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                   colIndex}.xy);\n                 `;\n             } else {\n               mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n             }\n           } else {\n             // Padding is even, so xRC corresponds to a single texel.\n             mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n           }\n\n           if (colIndex + 1 < filterWidth) {\n             // If dilation is even, the second entry should match the first\n             // (either both are composed or both are single samples). But if\n             // dilation is odd, then the second entry should be the opposite\n             // of the first (if the first is composed, the second is a single\n             // sample, and vice versa.)\n\n             const nextTexelOffset = padLeft % 2 === 0 ?\n                 util.nearestLargerEven(dilationWidth) :\n                 dilationWidth;\n\n             if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                 (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n               mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                   colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n\n               // If dilation > 1 then the xRC's will not be able to share any\n               // values, so each xRC will require two unique calls to getX.\n               if (dilationWidth > 1) {\n                 mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                        colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                        colIndex + 1}.xy);\n                     }\n                     `;\n               } else {\n                 mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                     colIndex + 1}.xy);\n                     `;\n               }\n\n             } else {\n               // If dilation is 1 and padding is odd, we have already read the\n               // texel when constructing the previous x value. Here we can\n               // simply skip the texture read.\n               if (nextTexelOffset === 1) {\n                 mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n               } else {\n                 mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                     colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n               }\n             }\n           }\n         }\n       } else {  // stride === 2\n         if (colIndex < filterWidth) {\n           // Depending on whether padLeft is even or odd, we want either the\n           // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n           // even, xC${colIndex +1} is simply the zw channels of texels we've\n           // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n           // need to come from the xy channels of a new texel, hence the `\n           // vec4\n           // final` initialized below.\n           if (padLeft % 2 === 1) {\n             mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                 colIndex + 1}.zw);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n             }\n           } else {\n             mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                 colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n\n             if (colIndex + 1 < filterWidth) {\n               mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                   colIndex + 1}.zw);\n                 `;\n             }\n           }\n         }\n       }\n\n       // localize the dotProd accumulation within the loop, the theory is for\n       // GPU with limited cache, accumulate sum across large amount of\n       // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n       // 50 variables)\n       if (colIndex < filterWidth) {\n         mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n\n         if (colIndex + 1 < filterWidth) {\n           mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n         }\n       }\n     }\n     mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n   mainLoop += `\n     }\n   `;\n\n     let activationSnippet = '', applyActivationSnippet = '';\n     if (activation) {\n       if (hasPreluActivation) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n       } else if (hasLeakyReluAlpha) {\n         activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n       } else {\n         activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n       }\n\n       applyActivationSnippet = `result = activation(result);`;\n     }\n\n     const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n     if (addBias) {\n       this.variableNames.push('bias');\n     }\n\n     if (hasPreluActivation) {\n       this.variableNames.push('preluActivationWeights');\n     }\n     if (hasLeakyReluAlpha) {\n       this.variableNames.push('leakyreluAlpha');\n     }\n\n     this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n   }\n }\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec4' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[2] && pos < outShape[1]) {' :\n        `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\n// import {assertAndGetBroadcastShape} from\n// '../../../tfjs-core/src/ops/broadcast_util';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [convInfo.batchSize, numCols, convInfo.inChannels] :\n            [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    x.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col =\n      backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped =\n      reshape({inputs: {x: im2Col}, backend, attrs: {shape: x2ColShape}});\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      isChannelsLast ? im2ColReshaped.shape as [number, number, number] :\n                       w2Row.shape as [number, number, number],\n      isChannelsLast ? w2Row.shape as [number, number, number] :\n                       im2ColReshaped.shape as [number, number, number],\n      isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] :\n                       [convInfo.batchSize, convInfo.outChannels, numCols],\n      transposeA, transposeB, hasBias, fusedActivation,\n      hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] =\n      isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape(\n      {inputs: {x: product}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    out =\n        backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              ${isChannelsLast?\n             `float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);` :\n             `float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);`}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Conv2DDerInputPackedProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'strides', type: 'vec2' as const },\n  ];\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\nimport {Conv2DDerInputPackedProgram} from '../conv_backprop_packed_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  if (env().getBool('WEBGL_PACK_CONV2DTRANSPOSE') &&\n      $dataFormat === 'channelsLast') {\n    const customValues = [\n      [convInfo.strideHeight, convInfo.strideWidth],\n    ];\n    const program = new Conv2DDerInputPackedProgram(convInfo);\n    return backend.runWebGLProgram(\n        program, [dy, filter], 'float32', customValues);\n  } else {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n  }\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nconst COS_PACKED = `\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const cos =\n    unaryKernelFunc({opSnippet: COS, packedOpSnippet: COS_PACKED});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(\n      public op: CumOpType, public outputShape: number[], exclusive: boolean,\n      reverse: boolean) {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val =\n        exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType, CumProgram} from '../cum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: MathBackendWebGL, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(args: {\n  inputs: CumprodInputs,\n  backend: MathBackendWebGL,\n  attrs: CumprodAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumOpType} from '../cum_gpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${\n                       colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${\n                       colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                    colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 0.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\n\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    const newWillReadFrequently =\n        env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null ||\n        newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext =\n          document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap, 0, 0,\n        width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {Conv2DPackedProgram} from '../conv_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  const prepareInputs = (): TensorInfo[] => {\n    const inputs: TensorInfo[] = [x, filter];\n\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat =\n        (input: TensorInfo, dataFormat: 'NHWC'|'NCHW'): TensorInfo => {\n          if (dataFormat === 'NCHW' && input.shape.length === 1 &&\n              input.shape[0] !== 1) {\n            const alignedInput = reshape({\n              inputs: {x: input},\n              backend,\n              attrs: {shape: [input.shape[0], 1, 1]}\n            });\n            intermediates.push(alignedInput);\n            return alignedInput;\n          }\n          return input;\n        };\n\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as unknown as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast'\n    && env().getBool('WEBGL_EXP_CONV')\n    ) {\n      const fusedActivation =\n          activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(\n      convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n      hasLeakyreluAlpha);\n    const customValues = [\n      [convInfo.padInfo.top, convInfo.padInfo.left],\n      [convInfo.strideHeight, convInfo.strideWidth],\n      [convInfo.dilationHeight, convInfo.dilationWidth],\n      [convInfo.inHeight, convInfo.inWidth]\n    ];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as unknown as 'float32',\n                               'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[],\n      private paramsShape: number[]) {\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], \n        params.shape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as unknown as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\n\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedGatherImplCPU} from '../kernel_utils/shared';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits =\n      paramsNestedSplits.map(t => backend.readSync(t.dataId) as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.readSync(paramsDenseValues.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImplCPU(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedRangeImplCPU} from '../kernel_utils/shared';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.readSync(starts.dataId) as TypedArray;\n  const $limits = backend.readSync(limits.dataId) as TypedArray;\n  const $deltas = backend.readSync(deltas.dataId) as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {raggedTensorToTensorImplCPU} from '../kernel_utils/shared';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendWebGL,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.readSync(shape.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $defaultValue = backend.readSync(defaultValue.dataId) as TypedArray;\n  const $rowPartitionValues =\n      rowPartitionTensors.map(t => backend.readSync(t.dataId) as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImplCPU(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n        attrs as unknown as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterPackedProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true, defaultIsTensor = false) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    const strideString2 = sliceDim > 1 ? 'strides[j + 1]' : 'strides';\n\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${updateSize}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${sliceDim}; j+=2) {\n              ivec4 index = round(${indicesSnippet});\n              flattenedIndex += index.xz * ${strideString};\n              if (j + 1 < ${sliceDim}) {\n                flattenedIndex += index.yw * ${strideString2};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${updatesSnippet};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, found));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {ScatterPackedProgram} from '../scatter_packed_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  let program;\n  if (env().getBool('WEBGL_PACK')) {\n    program = new ScatterPackedProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  } else {\n    program = new ScatterProgram(\n        numUpdates, sliceRank, flattenIndices.shape.length,\n        flattenX.shape.length, strides, flattenShape);\n  }\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class SearchSortedProgram implements GPGPUProgram {\n  variableNames = ['sortedSequence', 'values'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'numInputs', type: 'int' as UniformType}];\n\n  constructor(\n      batchSize: number, numInputs: number, numValues: number,\n      side: 'left'|'right') {\n    this.outputShape = [batchSize, numValues];\n\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${\n        Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead :\n                                                              webGL1LoopHead;\n\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SearchSortedProgram} from '../search_sorted_gpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendWebGL,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program = new SearchSortedProgram(\n      sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(\n      program, [sortedSequence, values], 'int32', customValues);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\n\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nconst SIN_PACKED = `\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\n\nexport const sin =\n    unaryKernelFunc({opSnippet: SIN, packedOpSnippet: SIN_PACKED});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, NamedAttrMap, StaticRegexReplace, StaticRegexReplaceAttrs, StaticRegexReplaceInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {staticRegexReplaceImplCPU} from '../kernel_utils/shared';\n\nexport function staticRegexReplace(args: {\n  inputs: StaticRegexReplaceInputs,\n  backend: MathBackendWebGL,\n  attrs: StaticRegexReplaceAttrs,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  const $x = backend.readSync(x.dataId) as Uint8Array[];\n\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string',\n                                           attrs as unknown as NamedAttrMap);\n\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\n\nimport {reshape} from './Reshape';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendWebGL,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape, false, true);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, flattenTensor], flattenTensor.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenTensor);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgl',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {bitwiseAndConfig} from './kernels/BitwiseAnd';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {staticRegexReplaceConfig} from './kernels/StaticRegexReplace';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  bitwiseAndConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  staticRegexReplaceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n"],"names":["createVertexShader","shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform","shader_util.getLogicalCoordinatesFromFlatIndex","shader_compiler.makeShader","shader_compiler.getUniformInfoFromShape","shader_util.getFlatIndexFrom3DOutput","shader_util.getFlatIndexFrom3D","webgl_util.createVertexShader","webgl_util.createStaticVertexBuffer","webgl_util.createStaticIndexBuffer","webgl_util.validateTextureSize","webgl_util.createTexture","webgl_util.callAndCheck","tex_util.getUnpackedMatrixTextureShapeWidthHeight","tex_util.getPackedMatrixTextureShapeWidthHeight","webgl_util.bindVertexBufferToProgramAttribute","tex_util.getUnpackedArraySizeFromMatrixSize","tex_util.getPackedRGBAArraySizeFromMatrixShape","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","gpgpu_util.createVertexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","gpgpu_util.createBufferFromOutputTexture","gpgpu_util.downloadMatrixFromPackedOutputTexture","gpgpu_util.createVertexShader","webgl_util.createProgram","webgl_util.linkProgram","webgl_util.validateProgram","gpgpu_util.bindVertexProgramAttributeStreams","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","webgl_util.bindTextureToProgramUniformSampler","webgl_util.validateFramebuffer","webgl_util.bindColorTextureToFramebuffer","concatImpl","maxImpl","transposeImpl","reshape","select","getSourceCoords","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","CHECK_NAN_SNIPPET","LINEAR","ABS","ELU","RELU","RELU6","SIGMOID","webgl_util.getShapeAs3D","unary_op.CLONE","tex_util.getDenseTexShape","webgl_util.canBeRepresented","unary_op.ABS","webgl_util.getBatchDim","webgl_util.getRowsCols","tex_util.PackingScheme","webgl_util.isReshapeFree","gpgpu_math.makeShaderKey","gpgpu_math.compileProgram","gpgpu_math.runProgram","webgl_util.getTextureShapeFromLogicalShape","webgl_util.logShaderSourceAndInfoLog","unary_packed_op.LINEAR","unary_op.LINEAR","unary_packed_op.RELU","unary_op.RELU","unary_packed_op.ELU","unary_op.ELU","unary_packed_op.RELU6","unary_op.RELU6","unary_packed_op.SIGMOID","unary_op.SIGMOID","binaryop_complex_gpu.COMPLEX_MULTIPLY","cpuMultiply","cpuTranspose","cpuAdd","getCoords","cpuBitwiseAnd","cpuSub"],"mappings":"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"}