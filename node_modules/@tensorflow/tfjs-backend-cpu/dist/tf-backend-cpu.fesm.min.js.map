{"version":3,"file":"tf-backend-cpu.fesm.min.js","sources":["../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/kernels/BitwiseAnd.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/version.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Draw.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedGather.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedRange.ts","../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/kernels/TensorScatterUpdate.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  override write(\n      values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi, looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, visit https://github.com/tensorflow/tfjs-node for more details. ' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as unknown as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  override incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  override move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  override numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  override async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  override readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return util.convertBackendValuesAndArrayBuffer(\n        this.data.get(dataId).values, dtype);\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  override async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  override memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  override dispose() {}\n\n  override floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  override epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const bitwiseAndImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a & b));\n\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataTypeFor, KernelFunc, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleUnaryImpl} from './unary_impl';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc<I extends number | string = number,\n  O extends number | string = number>(\n  name: string, op: SimpleUnaryOperation<I, O>,\n  dtype?: DataTypeFor<O>): KernelFunc {\n\n  const impl = createSimpleUnaryImpl<I, O>(op);\n\n  return unaryKernelFuncFromImpl<I, O>(name, impl, dtype);\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl<I extends number | string = number,\n  O extends number | string = number>(\n  name: string, unaryImpl: SimpleUnaryImpl<I, O>,\n  dtype?: DataTypeFor<O>): KernelFunc {\n\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values;\n    let decoded: ArrayLike<I>;\n    if (x.dtype === 'string') {\n      if (!Array.isArray(values)) {\n        throw new Error('String tensor\\'s value was not an instance of Array');\n      }\n      decoded = backend_util.fromUint8ToStringArray(values) as unknown as\n        ArrayLike<I>;\n    } else {\n      decoded = values as unknown as ArrayLike<I>;\n    }\n\n    const $dtype = dtype || x.dtype as DataTypeFor<O>;\n    const newValues = unaryImpl(decoded, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport {version};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, broadcast_util, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    const batchIndexA = bi % batchDimA;\n    const batchIndexB = bi % batchDimB;\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      // for when blockSize doesn't evenly divide the input\n      const iBlock = Math.min(i0 + blockSize, leftDim);\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        const jBlock = Math.min(j0 + blockSize, rightDim);\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const aVal =\n                    // tslint:disable-next-line: max-line-length\n                    a3dValues[batchIndexA * aBatch + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    // tslint:disable-next-line: max-line-length\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchIndexB * bBatch];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              // For some reason, disable-next-line is not working\n              // TODO(mattsoulanille): Remove this when switching to TS5.\n              /* tslint:disable: no-unnecessary-type-assertion */\n              const pixel = xBuf.get(b, xR, xC, d) as number;\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] = poolType === 'avg' ?\n                avgValue / Math.max(count, 1) :\n                minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol,\n                                         channel) as number;\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clipByValue = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as unknown as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clipByValue,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: MathBackendCPU,\n           attrs: CumprodAttrs}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumprod');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumprod in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeOnesTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 1 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] * vals[prevIdx] :\n                                aVals[idx] * vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'cpu',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const weightsBuf = backend.bufferSync<Rank, 'float32'>(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as unknown as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as unknown as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as unknown as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Draw, DrawAttrs, DrawInputs, KernelConfig, KernelFunc, TypedArray} from '@tensorflow/tfjs-core';\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function draw(\n    args: {inputs: DrawInputs, backend: MathBackendCPU, attrs: DrawAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {canvas, options} = attrs;\n  const {contextOptions, imageOptions} = options || {};\n  const alpha = imageOptions ?.alpha || 1;\n\n  const contextType = contextOptions ?.contextType || '2d';\n  if (contextType !== '2d') {\n    throw new Error(`Context type ${\n        contextOptions.contextType} is not supported by the CPU backend.`);\n  }\n  const ctx = canvas.getContext(contextType,\n    contextOptions?.contextAttributes || {}) as CanvasRenderingContext2D ;\n  if (ctx == null) {\n    throw new Error(`Could not get the context with ${contextType} type.`);\n  }\n\n  const [height, width] = image.shape.slice(0, 2);\n  const depth = image.shape.length === 2 ? 1 : image.shape[2];\n  const data = backend.data.get(image.dataId).values as TypedArray;\n  const multiplier = image.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255 * alpha];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if (image.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if (image.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n  const imageData = new ImageData(bytes, width, height);\n  ctx.putImageData(imageData, 0, 0);\n  return image;\n}\n\nexport const drawConfig: KernelConfig = {\n  kernelName: Draw,\n  backendName: 'cpu',\n  kernelFunc: draw as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 0) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as unknown as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as unknown as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync<Rank, 'float32'>(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as unknown as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], dtype, res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedRange, RaggedRangeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedRangeImpl} from './RaggedRange_impl';\n\nexport function raggedRange(\n    args: {inputs: RaggedRangeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {starts, limits, deltas} = inputs;\n\n  const $starts = backend.data.get(starts.dataId).values as TypedArray;\n  const $limits = backend.data.get(limits.dataId).values as TypedArray;\n  const $deltas = backend.data.get(deltas.dataId).values as TypedArray;\n\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImpl(\n      $starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas,\n      deltas.shape);\n\n  const rtNestedSplits = backend.makeTensorInfo(\n      [rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo(\n      [rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n\n  return [rtNestedSplits, rtDenseValues];\n}\n\nexport const raggedRangeConfig: KernelConfig = {\n  kernelName: RaggedRange,\n  backendName: 'cpu',\n  kernelFunc: raggedRange as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedTensorToTensor, RaggedTensorToTensorAttrs, RaggedTensorToTensorInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedTensorToTensorImpl} from './RaggedTensorToTensor_impl';\n\nexport function raggedTensorToTensor(args: {\n  inputs: RaggedTensorToTensorInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedTensorToTensorAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {shape, values, defaultValue, rowPartitionTensors} = inputs;\n  const {rowPartitionTypes} = attrs;\n\n  const $shape = backend.data.get(shape.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values as TypedArray;\n  const $rowPartitionValues = rowPartitionTensors.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n\n  const [outputShape, output] = raggedTensorToTensorImpl(\n      $shape, shape.shape, $values, values.shape, values.dtype, $defaultValue,\n      defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes,\n      rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\n\nexport const raggedTensorToTensorConfig: KernelConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'cpu',\n  kernelFunc: raggedTensorToTensor as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} =\n      attrs as unknown as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {searchSortedImpl} from './SearchSorted_impl';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: MathBackendCPU,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const $sortedSequence =\n      backend.data.get(sortedSequence.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n\n  const output = searchSortedImpl(\n      $sortedSequence, $values, sortedSequence.shape[0],\n      sortedSequence.shape[1], values.shape[1], side);\n  return backend.makeTensorInfo(values.shape, 'int32', output);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'cpu',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n  if (indices.shape[0] !== segmentIds.shape[0]) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n\n  let outBuf;\n  switch (sparseValues.dtype) {\n    case 'bool': {\n      const updatesBuf = backend.bufferSync<Rank, 'bool'>(sparseValues);\n      const $defaultValue =\n          Boolean(backend.data.get(defaultValue.dataId).values[0]);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'float32': {\n      const updatesBuf = backend.bufferSync<Rank, 'float32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'int32': {\n      const updatesBuf = backend.bufferSync<Rank, 'int32'>(sparseValues);\n      const $defaultValue =\n          backend.data.get(defaultValue.dataId).values[0] as number;\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    case 'string': {\n      const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n      const $defaultValue = util.decodeString(\n          backend.data.get(defaultValue.dataId).values[0] as Uint8Array);\n      outBuf = scatterImpl(\n          indicesBuf, updatesBuf, outputShape, outputSize, sliceSize,\n          numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n      break;\n    }\n    default:\n      throw new Error(`Unsupported type ${sparseValues.dtype}`);\n  }\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as unknown as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync<Rank, 'float32'>(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const inStrides = util.computeStrides(image.shape);\n  const batchInStride = inStrides[0];\n  const rowInStride = inStrides[1];\n  const colInStride = inStrides[2];\n\n  const outStrides = util.computeStrides(outShape);\n  const batchOutStride = outStrides[0];\n  const rowOutStride = outStrides[1];\n  const colOutStride = outStrides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchInStride,\n                  rowInStride, colInStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchOutStride + outY * rowOutStride +\n              outX * colOutStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as unknown as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(\n      i as unknown as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {bitwiseAndConfig} from './kernels/BitwiseAnd';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {drawConfig} from './kernels/Draw';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {raggedGatherConfig} from './kernels/RaggedGather';\nimport {raggedRangeConfig} from './kernels/RaggedRange';\nimport {raggedTensorToTensorConfig} from './kernels/RaggedTensorToTensor';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {staticRegexReplaceConfig} from './kernels/StaticRegexReplace';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  bitwiseAndConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  drawConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  LRNConfig,\n  LRNGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  raggedGatherConfig,\n  raggedRangeConfig,\n  raggedTensorToTensorConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  staticRegexReplaceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {scatterImpl} from './Scatter_impl';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: MathBackendCPU,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {tensor, indices, updates} = inputs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync<Rank, 'int32'>(indices);\n  const updatesBuf = backend.bufferSync<Rank, 'int32'|'float32'>(updates);\n  const tensorBuf = backend.bufferSync<Rank, 'int32'|'float32'>(tensor);\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, tensor.shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, tensorBuf, sumDupeIndices);\n  return backend.makeTensorInfo(tensor.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'cpu',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","nextDataId","constructor","super","this","blockSize","firstUse","data","DataStorage","engine","write","values","shape","env","get","backend_util","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","incRef","decRef","move","numDataIds","async","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","convertBackendValuesAndArrayBuffer","bufferSync","strings","decodeString","buffer","_a","Error","makeOutput","makeTensorFromTensorInfo","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","identityConfig","Identity","input","realVal","realConfig","Real","castImpl","inputType","Int32Array","from","zero","toTypedArray","resultData","resultShape","a","b","cast","attrs","zerosTensorInfo","floatX","realPart","hasEncodingLoss","resultType","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","add","Add","addConfig","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","bitwiseAndImpl","bitwiseAndConfig","BitwiseAnd","createSimpleUnaryImpl","newValues","getArrayFromDType","unaryKernelFunc","unaryKernelFuncFromImpl","unaryImpl","decoded","ceilImpl","xi","ceil","ceilConfig","Ceil","concatImpl","outShape","simplyConcat","offset","colOffset","decodedData","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","expm1Config","Expm1","floorImpl","floor","floorConfig","Floor","floorDivImpl","floorDivConfig","FloorDiv","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greaterConfig","Greater","greaterEqualImpl","greaterEqualConfig","GreaterEqual","lessImpl","lessConfig","Less","lessEqualImpl","lessEqualConfig","LessEqual","linSpaceImpl","stop","num","step","logImpl","log","logConfig","Log","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximumConfig","Maximum","minimumImpl","min","minimumConfig","Minimum","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqualConfig","NotEqual","transposeImpl","perm","xRank","xSize","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","fill","splits","lastSplit","validateSplits","nrows","rowLength","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","raggedGatherImpl","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","join","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","raggedRangeImpl","starts","startsShape","startsDType","limits","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","nVals","rtDenseValues","valueIndex","rowSize","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","compute","multiplier","outputShape","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","reshape","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","out","raggedTensorToTensorImpl","shapesShape","rangeImpl","rsqrtImpl","sqrt","rsqrtConfig","Rsqrt","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","TensorBuffer","rank","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","sqrtImpl","sqrtConfig","Sqrt","squaredDifferenceImpl","diff","squaredDifferenceConfig","SquaredDifference","staticRegexReplaceImpl","pattern","replaceGlobal","rewrite","replace","RegExp","staticRegexReplaceConfig","StaticRegexReplace","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","s","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","Map","inputBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","existingIndex","uniqueIndex","outputTmpShape","outputBuffer","uniqueElementIndex","version","registerBackend","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","bi","batchIndexA","batchIndexB","i0","iBlock","j0","jBlock","k0","kBlock","sum","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acosConfig","Acos","acos","acoshConfig","Acosh","acosh","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asinConfig","Asin","asin","asinhConfig","Asinh","asinh","atanConfig","Atan","atan","atan2Config","Atan2","atan2","atanhConfig","Atanh","atanh","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clipByValueConfig","ClipByValue","clipAttrs","clipValueMax","clipValueMin","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","shapes","assertParamsConsistent","computeOutShape","$inputs","filter","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cosConfig","Cos","cos","coshConfig","Cosh","cosh","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumprodConfig","Cumprod","exclusive","reverse","permutedAxis","resultDtype","makeOnesTypedArray","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","cumsumConfig","Cumsum","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2DConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2DBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","drawConfig","Draw","canvas","options","contextOptions","imageOptions","contextType","ctx","getContext","contextAttributes","height","width","depth","bytes","Uint8ClampedArray","rgba","imageData","ImageData","putImageData","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","$dim","expandDimsConfig","ExpandDims","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","e","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","fusedConv2DConfig","FusedConv2D","resultOld","reshapedBias","reshapedAlpha","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFiniteConfig","IsFinite","isFinite","isInfConfig","IsInf","Infinity","isNaNConfig","IsNan","linSpaceConfig","LinSpace","log1pConfig","Log1p","log1p","logicalAndConfig","LogicalAnd","logicalNotConfig","LogicalNot","logicalOrConfig","LogicalOr","LRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","LRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modConfig","Mod","rem","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powConfig","Pow","raggedGatherConfig","RaggedGather","$paramsNestedSplits","$paramsNestedSplitsShapes","$paramsDenseValues","$indices","outputDenseValuesShape","outputNestedSplitsTensors","outputDenseValuesTensor","raggedRangeConfig","RaggedRange","$starts","$limits","$deltas","rtNestedSplitsData","rtDenseValuesData","raggedTensorToTensorConfig","RaggedTensorToTensor","rowPartitionTensors","$values","$defaultValue","$rowPartitionValues","rangeConfig","Range","reciprocalConfig","Reciprocal","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","roundConfig","Round","base","scatterNdConfig","ScatterNd","calculateShapes","lowerBound","mid","upperBound","searchSortedConfig","SearchSorted","sortedSequence","side","sortedInputs","numInputs","sortedInputsSlice","searchSortedImpl","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","signConfig","Sign","sinConfig","Sin","sinhConfig","Sinh","sinh","threshold","softplusConfig","Softplus","tooLarge","tooSmall","expX","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$denseShape","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","Boolean","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","stepConfig","Step","stepAttrs","NaN","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","sliced","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tanConfig","Tan","tan","tanh","Tanh","transformConfig","Transform","transforms","interpolation","fillMode","inStrides","batchInStride","rowInStride","colInStride","outStrides","batchOutStride","rowOutStride","colOutStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","batchStride","rowStride","colStride","yFloor","xFloor","yCeil","xCeil","kernelConfigs","TensorScatterUpdate","updatesBuf","tensorBuf","Tile","TopK","Unique","Unpack","valueRank","tempRes","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfig","registerKernel"],"mappings":"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L0uD,GACI5rB,EAAWR,EAAaC,EAAYosB,EAAaC,EACjDC,EAAWzoC,EAAO0oC,EAAQC,EAAQ77B,EAAS+xB,IAClDjlD,EAAI+uD,GACDL,GACI5rB,EAAWR,EAAaC,EAAYosB,EAAaC,EACjDC,EAAWzoC,EAAO0oC,EAAQG,EAAO/7B,EAAS+xB,KAclB9oB,EAAI2yB,KAVnCG,EAAQjvD,GACL0uD,GACI5rB,EAAWR,EAAaC,EAAYosB,EAAaC,EACjDC,EAAWzoC,EAAO4oC,EAAOD,EAAQ77B,EAAS+xB,IACjDjlD,EAAI+uD,GACDL,GACI5rB,EAAWR,EAAaC,EAAYosB,EAAaC,EACjDC,EAAWzoC,EAAO4oC,EAAOC,EAAO/7B,EAAS+xB,GAIvD,CC7KO,MCgHDiK,GAAgC,CACpC7iC,GACA3sB,GACAktB,GACAG,GACA1mB,GACA6mB,GACAI,GACAQ,GACAG,GACAI,GACAG,GACAG,GACAG,GACAG,GACAG,GACAoF,GACAW,GACAI,GACAoB,GACAxK,GACAiL,GACAkB,GACAgB,GACA9xB,GACAiyB,GACAv1B,GACAkE,GACA4xB,GACA13B,GACA+3B,GACAsB,GACAgC,GACAE,GACAU,GACAW,GACAW,GACAmB,GACAQ,GACAG,GACAG,GACA6C,GACAY,GACAE,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACAiB,GACAS,GACAI,GACAsB,GACA5iB,GACAikB,GACA9iC,GACA+jC,GACA3jC,GACA6jC,GACA1jC,GACAyoC,GACAO,GACAE,GACA9oC,GACAG,GACAkpC,GACAK,GACAE,GACAI,GACApoC,GACAG,GACAlJ,GACAiyC,GACAla,GACAoa,GACAG,GACAG,GACAjtB,GACAnc,GACAG,GACAmpC,GACA3oC,GACA6oC,GACAG,GACAE,GACAE,GACAE,GACAW,GACAU,GACAjqC,GACAmqC,GACAE,GACAE,GACAK,GACAE,GACAQ,GACAI,GACAtrC,GACAwrC,GACAM,GACAa,GACArsC,GACAM,GACA+sC,GACAU,GACAK,GACA1tC,GACAkuC,GACAS,GACAM,GACAE,GACAI,GACAx1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"}